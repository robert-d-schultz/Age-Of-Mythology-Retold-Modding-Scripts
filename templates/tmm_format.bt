typedef struct {
    
    //HEADER
    uint32 magicnumber;
    Assert(magicnumber == 1296913474);
    uint32 version; //35
    Assert(version == 35);
    uint16 DP;
    Assert(DP == 20548);
    
    //Import Crap
    int32 import_crap_bytelength<hidden=true>;
    typedef struct {
        uint32 string_length<hidden=true>;
        wchar_t the_string[string_length];
        int32 other_stuff1; //Always the same?
        uchar other_stuff[10]; //Always the same?
        int16 other_stuff2; //Different?
    } ImportCrap <optimize=false>;
    int32 import_crap_count<hidden=true>;
    ImportCrap import_craps[import_crap_count];
    
    
    float bounding_box[6];
    float bigger_bounding_box[6];
    float some_float;
    
    int32 num_mesh_groups;
    int32 num_materials;
    Assert(num_materials == num_mesh_groups);
    int32 num_shader_techs;
    
    int32 num_bones;
    int32 zero1;
    Assert(zero1 == 0);
    int32 num_attachments;
    int32 num_vertices;
    int32 num_triangles;
    
    int32 vertices_start;
    Assert(vertices_start == 0);
    int32 vertices_bytelength;
    
    int32 triangles_start;
    Assert(vertices_bytelength == triangles_start);
    int32 triangles_bytelength;
    
    int32 weights_start;
    if (weights_start != 0) {
        Assert((vertices_bytelength + triangles_bytelength) == weights_start);
    }
    int32 weights_bytelength;
    
    int32 zeros1[4]; //2 block types unseen?
    
    int32 heights_start;
    Assert((vertices_bytelength + triangles_bytelength + weights_bytelength) == heights_start);
    int32 heights_bytelength;
    
    int32 zeros2[2]; //another block type unseen?
    
    byte bool1; //maybe
    Assert(bool1 == 0);
    byte bool2; //maybe
    Assert(bool2 == 1);
    
    //Scale factor is included in this
    //1.2 on the diagonals = the model is stored at 1.2 scale
    //...and animations need to be scaled up to that? so dumb...
    float transform_matrix[12];
    
    typedef struct {
        int32 some_zero;
        Assert(some_zero == 0);
        int32 parent_bone_id;
        uint32 point_string_length<hidden=true>;
        wchar_t point_string[point_string_length];
        
        float transform_matrix1[12];
        float transform_matrix2[12];
        
        //Are these always the same?
        local int i;
        for( i = 0; i < 5; i++ ) {
            //Assert(transform_matrix1[i] == transform_matrix2[i]);
            //No... anubite.tmm counter example.
            //Maybe scale factor not being taken into account or something
        }
        
        uint32 something1;  //normally 0, but 2 for "Relic" on the pegasus? so maybe rider related (belle)?
        uint32 something2;
        Assert(something1 == 0 || something1 == 2 );
        Assert(something2 == 0);
        
        //name in the .json file?
        uint32 point_string_length2<hidden=true>;
        wchar_t point_string2[point_string_length2];

        int32 something3;
        int32 something4;
        int32 something5;
        int32 something6;
        Assert(something3 == -1);
        Assert(something4 == 0);
        Assert(something5 == 0);
        Assert(something6 == 0);
        
    } Attachment <optimize=false>;
    Attachment attachments[num_attachments];
    
    //MeshGroup
    typedef struct {
        int32 vertices_start;
        int32 triangles_start;
        int32 num_group_vertices;
        int32 num_group_triangles;
        int32 material_index;
        int32 one;
        Assert (one == 1);
    } MeshGroup <optimize=false>;
    MeshGroup mesh_groups[num_mesh_groups];
    
    typedef struct {
        uint32 mat_string_length<hidden=true>;
        wchar_t mat_string[mat_string_length];
    } Material <optimize=false>;
    Material materials[num_materials];
    
    typedef struct {
        uint32 tech_length<hidden=true>;
        wchar_t tech_string[tech_length];
    } ShaderTech <optimize=false>;
    ShaderTech shader_techs[num_shader_techs];
    
    typedef struct {
        uint32 bone_name_length<hidden=true>;
        wchar_t bone_name[bone_name_length];
        int32 parent_id;
        
        //Additional values for collision? Maybe a position offset?
        float float1;
        float float2;
        float float3;
        Assert((float1 <= 1.6) && (float1 >= -1.6));
        Assert((float2 <= 1.6) && (float2 >= -1.6));
        Assert((float3 <= 1.6) && (float3 >= -1.6));
        
        //Definitely used for collision, at least the "clicking on the unit" type
        float bone_radius;
        
        //Stored with the scale factor baked-in
        float parent_space_matrix1[16];
        float world_space_matrix[16];
        float inverse_bind_matrix[16];
    } BoneStuff <optimize=false>;
    BoneStuff bone_stuffs[num_bones];
    
    
    //The end gets very weird
    //Some of this stuff has got to only be here if there are bones present
    
    //No idea what this is
    typedef struct {
        int32 some_int; //bone id?
        float some_float1;
        float some_float2; //0.75
    } Thing <optimize=false>;
    int32 num_things<hidden=true>;
    Thing things[num_things];
    
    
    //Guessing this is the part that is bone-dependent
    if (num_bones > 0) {
        int16 zero4;
        Assert(zero4 == 0);
        
        byte bool_perhaps;
        if (bool_perhaps == 1) {
            uchar foobar[42];
        }
        
        byte zero5;
        Assert(zero5 == 0);
    }
    
    byte zero6;
    Assert(zero6 == 0);
    int16 VX;
    Assert(VX == 22614); //"VX"
    int32 bytelength1;
    uchar following_bytes[bytelength1];
    
    //this seems to be a heightmap, but projected from the side (x-axis) of the building
    //no idea what this could be used for. ...shadow optimization?
    if (following_bytes[sizeof(following_bytes) - 1] == 1) {
        int16 VS;
        Assert(VS == 21334); //"VS"
        int32 bytelength2<hidden=true>;
        
        int32 vs_int; //could be the number of these weird heightmap things
        Assert(vs_int == 1); //assume its always 1 for now
        
        float image_bounding_box[6]; //seems to be the same as the one above
        int32 image_width;
        float vs_another_float; //maybe a scale factor for the heightmap, which would be normalized 0-1
        int32 image_block_size; //based on image_width above?
        Assert(image_block_size == image_width*image_width*4);
        
        int32 image[image_width*image_width];
    }
    
    
} TMM;

TMM tmm;